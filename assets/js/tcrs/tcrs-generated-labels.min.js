/* 
Tool Cool Range Slider - Generated Labels Plugin v1.0.8
https://github.com/mzusin/toolcool-range-slider 
MIT License        
Copyright (c) 2022-present, Miriam Zusin                    
*/
(() => {
  var w = (a) =>
    a == null
      ? !1
      : typeof a == "boolean"
      ? a
      : a.trim().toLowerCase() === "true";
  window.tcRangeSliderPlugins = window.tcRangeSliderPlugins || [];
  var C = "min-label",
    S = "max-label",
    L = "#1E293B",
    P = () => {
      let a = null,
        p = null,
        i = null,
        x,
        f = !1,
        n = L,
        o = "",
        h,
        r = null,
        s = null,
        u = null,
        g = [],
        A = () => {
          var t;
          let e =
            (t = a == null ? void 0 : a.shadowRoot) == null
              ? void 0
              : t.querySelector(".range-slider-box");
          (r = document.createElement("div")),
            r.classList.add("labels-row"),
            e.prepend(r);
        },
        v = (e) => {
          let t = document.createElement("label");
          return (t.className = e), t.setAttribute("for", "range-slider"), t;
        },
        k = () => {
          (s = v(C)),
            (s.textContent = b(i == null ? void 0 : i.getTextMin(), o)),
            (u = v(S)),
            (u.textContent = b(i == null ? void 0 : i.getTextMax(), o)),
            p == null || p.before(s),
            p == null || p.after(u);
          let e = i == null ? void 0 : i.getValues();
          if (!!e)
            for (let t = 0; t < e.length; t++) {
              let l = v(`value${t + 1}-label generated-label`);
              (l.textContent = b(e[t], o)), g.push(l), r == null || r.append(l);
            }
        },
        T = () => {
          for (let e of g) !e || e.remove();
          s == null || s.remove(),
            u == null || u.remove(),
            r == null || r.remove(),
            (g = []);
        },
        z = (e) => {
          (f = e), f ? (A(), k()) : T();
        },
        y = (e) => {
          n = e;
          for (let t of g) !t || (t.style.color = n != null ? n : L);
          s && (s.style.color = n != null ? n : L),
            u && (u.style.color = n != null ? n : L);
        },
        E = (e) => {
          (o = e), x && x();
        },
        M = () => {
          !i ||
            !r ||
            r.classList.toggle(
              "is-reversed",
              i.isRightToLeft() || i.isBottomToTop()
            );
        },
        b = (e, t) => {
          let l = `${(e != null ? e : "").toString()}${t}`;
          return !!h && typeof h == "function" ? h(e) : l;
        };
      return {
        get name() {
          return "Generated Labels";
        },
        init: (e, t, l, c) => {
          var d, m, I;
          (a = e),
            (i = c),
            (p =
              (d = e.shadowRoot) == null
                ? void 0
                : d.getElementById("range-slider")),
            (x = t),
            (n =
              (m = a.getAttribute("generate-labels-text-color")) != null
                ? m
                : L),
            (o =
              (I = a.getAttribute("generate-labels-units")) != null ? I : ""),
            z(w(a.getAttribute("generate-labels"))),
            M(),
            y(n);
        },
        update: (e) => {
          if (!(!f || !e.values)) {
            M();
            for (let t = 0; t < e.values.length; t++) {
              let l = e.values[t],
                c = g[t];
              if (l === void 0 && !!c) {
                c.remove(), (g[t] = void 0);
                continue;
              }
              if (l !== void 0 && !c) {
                let d = v(`value${t + 1}-label generated-label`);
                if (
                  ((d.textContent = b(l, o)), (g[t] = d), e.values.length <= 0)
                )
                  r == null || r.append(d);
                else if (t === 0) r == null || r.append(d);
                else {
                  let m = g[t - 1];
                  m == null || m.after(d);
                }
                continue;
              }
              !c || (c.textContent = b(l, o));
            }
            s && (s.textContent = b(e.textMin, o)),
              u && (u.textContent = b(e.textMax, o)),
              y(n);
          }
        },
        onAttrChange: (e, t) => {
          e === "generate-labels" && z(w(t)),
            e === "generate-labels-text-color" && y(t),
            e === "generate-labels-units" && E(t);
        },
        gettersAndSetters: [
          {
            name: "generateLabels",
            attributes: {
              get() {
                return f != null ? f : !1;
              },
              set: (e) => {
                z(w(e));
              },
            },
          },
          {
            name: "textColor",
            attributes: {
              get() {
                return n != null ? n : "";
              },
              set: (e) => {
                y(e);
              },
            },
          },
          {
            name: "generateLabelsTextColor",
            attributes: {
              get() {
                return n != null ? n : "";
              },
              set: (e) => {
                y(e);
              },
            },
          },
          {
            name: "units",
            attributes: {
              get() {
                return o != null ? o : "";
              },
              set: (e) => {
                E(e);
              },
            },
          },
          {
            name: "generateLabelsUnits",
            attributes: {
              get() {
                return o != null ? o : "";
              },
              set: (e) => {
                E(e);
              },
            },
          },
          {
            name: "generateLabelsFormat",
            attributes: {
              get() {
                return h;
              },
              set: (e) => {
                (h = e), x && x();
              },
            },
          },
        ],
        css: `
      .range-slider-box{width:100%}
      .range-slider-box > .row{
      border: 1px solid rgba(0, 0, 0, .1);
      padding:var(--tripzzy-input-padding);
      padding-top: 14px;
      padding-bottom: 14px;
      box-sizing:border-box;
      position:absolute;
      top:100%;
      box-sizing:border-box;
      background:#fff;
      height:70px;
      align-items:flex-start;
      z-index: 1;
      width: calc(100% + 2px);
      left: -1px;
      display:flex;
      transform:translateY(-20px);
      visibility:hidden;
      opacity:0;
      transition: all 0.3s cubic-bezier(0.175, 0.885, 0.32, 1.275);
      box-shadow:var( --tripzzy-box-shadow );

    }
    .range-slider-box > .tripzzy-row.show{
      transform: translateY(0px);
      visibility: visible;
      opacity: 1;
    }
    .labels-row{
      cursor:pointer;
      flex-basis: 100%;
      text-align: center;
      display: flex;
      position:relative;
      align-items:center;
      height:auto;
      gap:5px;
      visibility:hidden;
    }
    .labels-row.loaded{visibility:visible}
    .labels-row .value2-label:not(.has-placeholder):after{
      content: '-';
      display: block;
    }
    .tripzzy-labels-row{
      padding:8px 16px;
    }

    .tripzzy-labels-row:after{
      content: "";
      width: 1.28em;
      height: 1.28em;
      background-image: url("data:image/svg+xml,%3Csvg width=%2718%27 height=%2718%27 viewBox=%270 0 18 18%27 fill=%27none%27 xmlns=%27http://www.w3.org/2000/svg%27%3E%3Cpath d=%27M13.5 6.75L9 11.25L4.5 6.75%27 stroke=%27black%27 stroke-opacity=%270.5%27 stroke-width=%272%27/%3E%3C/svg%3E%0A");
      background-position: center;
      position: absolute;
      top: 50%;
      right: 11px;
      transform: translateY(-50%);
    }
    .tripzzy-labels-row.has-before-field{
      padding-left: calc(var(--tripzzy-search-font-size, 12px) + 20px);
    }
    .labels-row.show:after{
      transform:translateY(-50%) rotate(180deg);
    }
    .labels-row label{
      position:relative;
      display: flex;
      flex-direction: row-reverse;
      align-items: center;
      gap: 5px;
      line-height:1.2;
      text-align: center;
      white-space: nowrap;
    }
    
    .is-reversed,
    .is-reversed + .row{
      flex-direction: row-reverse;
    }
    
    .type-vertical{
      position: relative;
    }
    
    .type-vertical .labels-row{
      flex-direction: column;
      position: absolute;
      top: 50%;
      right: -100%;
      transform: translateY(-50%);
    }
    
    .type-vertical .is-reversed,
    .type-vertical .is-reversed + .row{
      flex-direction: column-reverse;
    }
    
    .max-label,
    .min-label{
      margin: 0 1rem;
      text-align: center;
      white-space: nowrap;
      padding:5px 10px;
      background:#eee;
      border-radius:var( --tripzzy-rounded, 3px );
      position:absolute;
      bottom:12px;
      line-height:1.2;
    }
    .min-label{
      margin-left:0;
    }
    .max-label{
      margin-right:0;
      right:12px;
    }
    
    .panel-fill{
      background:var( --tripzzy-primary-color, #000 );
    }
    .pointer-shape{
      width:0;
      height:0;
      border:none;
      border-top: 8px solid transparent;
      border-left: 6px solid var(--tripzzy-primary-color, #000);
      border-bottom: 8px solid transparent;
      box-shadow:none;
      background:transparent;
      border-radius:0;
    }
    .pointer-shape:hover,
    .pointer-shape:focus{
      border:none;
    }
    .pointer:focus .pointer-shape,
    .pointer-shape:hover{
      border:none;
      box-shadow:none;
      background:transparent;
    }
    .pointer.pointer-0 .pointer-shape{
      border-top: 8px solid transparent;
      border-left: 6px solid var(--tripzzy-primary-color, #000);
      border-bottom: 8px solid transparent;
    }
    .pointer.pointer-1 .pointer-shape{
      border-top: 8px solid transparent;
      border-right: 6px solid var(--tripzzy-primary-color, #000);
      border-bottom: 8px solid transparent;
      border-left:transparent;
    }
    `,
        destroy: T,
      };
    };
  window.tcRangeSliderPlugins.push(P);
  var D = P;
})();
